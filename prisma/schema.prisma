generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String
  username String @unique
  password String
  Log      Log[]
}

model Product {
  id               String             @id @default(uuid())
  name             String
  stock            Int?
  type_id          String
  image            String
  materialRecipe   MaterialRecipe[]
  type             ProductType        @relation(fields: [type_id], references: [id])
  ProductionDetail ProductionDetail[]
  SaleDetail       SaleDetail[]
}

model ProductType {
  id        String    @id @default(uuid())
  name      String
  price     Float
  retail_price Float?    @default(0)
  Product   Product[]
}

model Client {
  id         String           @id @default(uuid())
  name       String
  email      String
  phone      String
  address_id String
  attention  String?          @default("Sin horarios")
  address    ClientCoordinate @relation(fields: [address_id], references: [id])
  sale       Sale[]
}

model ClientCoordinate {
  id      String   @id @default(uuid())
  lat     String
  lon     String
  address String   @default("-")
  client  Client[]
}

model Material {
  id             String           @id @default(uuid())
  name           String
  stock          Float
  image          String
  actual_price   Float
  type           String           @default("otros")
  materialRecipe MaterialRecipe[]
}

model MaterialRecipe {
  id          String   @id @default(uuid())
  material_id String
  product_id  String
  quantity    Float
  material    Material @relation(fields: [material_id], references: [id])
  product     Product  @relation(fields: [product_id], references: [id])

  @@unique([product_id, material_id])
}

model Sale {
  id         String       @id @default(uuid())
  date       DateTime
  total      Float
  client_id  String
  isRetail   Boolean?     @default(false)
  note       String?
  discount_classic Float? @default(0)
  discount_gourmet Float? @default(0)
  delivered  Boolean      @default(false)
  paid       Boolean      @default(false)
  number     Int          @default(autoincrement())
  client     Client       @relation(fields: [client_id], references: [id])
  saleDetail SaleDetail[]
}

model SaleDetail {
  id         String  @id @default(uuid())
  quantity   Int
  sale_id    String
  product_id String
  product    Product @relation(fields: [product_id], references: [id])
  sale       Sale    @relation(fields: [sale_id], references: [id])
}

model Production {
  id                String             @id @default(uuid())
  date              DateTime
  hours             Int
  personal_quantity Int
  ProductionDetail  ProductionDetail[]
}

model ProductionDetail {
  id            String     @id @default(uuid())
  production_id String
  product_id    String
  quantity      Int
  product       Product    @relation(fields: [product_id], references: [id])
  production    Production @relation(fields: [production_id], references: [id])
}

model Log {
  id          String   @id @default(uuid())
  date        DateTime @default(now())
  action      String
  description String
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])
}

model Transaction {
  id        String   @id @default(uuid())
  name      String
  value     Float
  type      String
  date      DateTime
  parent_id String?
}
